<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <title>User Stats</title>
  </head>
  
<body>
  <div class="container" style="padding-top:120px;">
    <div class="select-year">
      <label for="year" style="font-weight: bold; font-size: 20px;">Choose Year:</label>
      <select class="form-select form-select-sm" id="yearSelect">
        <option value="">Select Year</option>
        <option value="2018">2018</option>
        <option value="2019">2019</option>
        <option value="2020">2020</option>
        <option value="2021">2021</option>
        <option value="2022">2022</option>
        <option value="2023">2023</option>
        <option value="2024">2024</option>
      </select>
    </div>
   
    <h1 style="margin-top: 30; margin-left: 30px;">Monthly Users</h1>
    <div style="width: 700px; margin: 20px;">
      <canvas id="monthlyUsersChart" width="400" height="200"></canvas></div>
    <p style="text-align: center; font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif ">Months</p>
    <hr>
    <br>
    
    <div class="flex items-center space-x-12" style="margin-left: 30px;">
      <div>
          <label for="toDate" class="block text-sm font-medium text-gray-700">To Date</label>
          <input type="date" id="toDate" class="mt-1 block w-full px-4 py-2 border-gray-300 rounded-md shadow-sm">
      </div>
      <div>
          <label for="fromDate" class="block text-sm font-medium text-gray-700">From Date</label>
          <input type="date" id="fromDate" class="mt-1 block w-full px-4 py-2 border-gray-300 rounded-md shadow-sm">
      </div>
      <div class="flex items-end">
          <button class="px-6 py-2 bg-blue-600 text-white rounded-md shadow hover:bg-blue-700">Search</button>
      </div>
      <div style="align-items: end ; padding-left:30px;">
    <button class="px-6 py-2   bg-green-500 text-white rounded-md shadow hover:bg-green-600 " >Download</button>
</div>
  </div>
  
  <br>
    <h1 style="text-align: center;">User Analytics</h1>
   
    <div style="width: 700px; margin: 20px;" > <canvas id="userAnalyticsChart"> User Analytics</canvas></div>
   
  </div>
  <script src="/js/charts.js"></script>
</body>
<footer>
  <p>&copy; 2024 Design by Tycho Technologies</p>
</footer>

</html> -->

<!-- <!DOCTYPE html>
<html>
<head>
    <title>User Analytics</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <h1>User Analytics for  year</h1>
    <form action="/" method="get">
        <label for="year">Select Year:</label>
        <select name="year" onchange="this.form.submit()" id=" yearSelect">
      
        
    </form>

    <canvas id="userChart"></canvas>

    <script>
      let chart;
        
      try {
    const sql = "SELECT * FROM esearch_db.i3_app_users";
    const result = await db.query(sql);  // Assuming `conn` is your database connection object

    if (result.rows.length > 0) {
        let dateArray = [];
        result.rows.forEach(row => {
            dateArray.push(row.createdAt);
        });
        console.log(dateArray);  // You can use dateArray as needed
    } else {
        console.log("No result");
    }
} catch (error) {
    console.error("Error:", error);
}
        // Function to fetch data for selected year
        // async function fetchYearData(year) {
        //     const response = await fetch(`/?year=${year}`);
        //     const data = await response.json();
        //     updateChart(data);
        // }

        // Update chart with new data
        function updateChart(data) {
            const labels = data.map(item => item.month);
            // const totalUsers = data.map(item => item.total_users);
            // const subscriptions = data.map(item => item.subscription);
            // const trials = data.map(item => item.trial);

            if (chart) {
                chart.destroy();
                console.log("jsdhfj")
            }
        const ctx = document.getElementById('userChart').getContext('2d');
        // const createdAt = JSON.stringify(createdAt);
        const chart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
              datasets: [
                    {
                        label: 'year',
                        data:  createdAt,
                        backgroundColor: 'blue'
                    },
                    
                ]
            }
        });
      }
      document.getElementById('yearSelect').addEventListener('change', (e) => {
            fetchYearData(e.target.value);
        });
        fetchYearData(value);
    </script>
</body>
</html>
 -->


<!-- <!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Analytics</title>
  <link rel="stylesheet" href="/style.css">
</head>

<body>
  </div>

  <div class="chartCard" style="padding-top: 30px;">
    <div class="chartBox">
      <select name="yearSelect" id="select-year" onchange="filterChart(this)">
        <option>Please Select:</option>
        <option value="12">2 years</option>
        <option value="6">6 months</option>
        <option value="3">3 months</option>
        <option value="1">1 month</option>
      </select> -

      <button>ID</button> &nbsp;
      <button onclick="stockDataFetch">createdAt</button>
    
      <canvas id="myChart"></canvas>
    </div>
  </div>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js/dist/chart.umd.min.js"></script

  <script>
    ///fatch block
    async function stockDataFetch() {
      const url="http://localhost:3000/getYears";
      const response = await fetch (url);
      //wait for the req to be complete
      const datapoints = await response.json();
      console.log(datapoints)

    }
    // setup 
    const data = {
      labels: ["Jan", "Fab", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct","Nov","Dec"],
      datasets: [{
        createdAt:["Tooltip Jan", "Fab", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct","Nov","Dec"],
        label: 'Weekly Sales',
        data: [18, 12, 6, 9, 12, 13, 16, 23, 12],
        backgroundColor: [
          'rgba(255, 26, 104, 0.2)',
          'rgba(54, 162, 235, 0.2)',
          'rgba(255, 206, 86, 0.2)',
          'rgba(75, 192, 192, 0.2)',
          'rgba(153, 102, 255, 0.2)',
          'rgba(255, 159, 64, 0.2)',
          'rgba(0, 0, 0, 0.2)'
        ],
        borderColor: [
          'rgba(255, 26, 104, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)',
          'rgba(0, 0, 0, 1)'
        ],
        borderWidth: 1
      }]
    };

    // config 
    const config = {
      type: 'bar',
      data,
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    };

    // render init block
    const myChart = new Chart(
      document.getElementById('myChart'),
      config
    );

    console.log(myChart.config.data.datasets[0].createdAt)

    
  </script>

</body>

</html> -->

<!DOCTYPE html>
<html>
<head>
  <title>Analytics Chart</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <h1>User Analytics for </h1>
  <select id="yearSelect" onchange="fetchData()">
    <% if (result && result.length > 0) { %>
    <% result.forEach((item, index )=> { %>
      <option value="<%= item.year %>" <%= index === 0 ? 'selected' : '' %>><%= item.year %></option>
    <% }); %>
    <% } else { %> 
      <option>No data available</option>
       <% } %>
  </select>
  <div>
  <canvas id="analyticsChart"></canvas>
</div>
 
  <!-- <script>
    let chart;
    
    document.addEventListener('DOMContentLoaded', () => {
      const yearSelect = document.getElementById('yearSelect');
      if(yearSelect.options.length>0 &&yearSelect.value){
        fetchData();
      }
    });
    function fetchData() {
      const yearSelect = document.getElementById('yearSelect').value;
    console.log(yearSelect)
      // const selectedYear = yearSelect.options.value ;
      // console.log(selectedYear)
      fetch(`/api/data?year=${yearSelect}`)
        .then(response =>{
          if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        console.log("response===",response)
        return response;
      })
        .then(results => {  
          if (!results || results.length === 0) {
          alert('No data available for the selected year');
          if (chart) 
          chart.destroy();
          return; 
        }
        console.log(results)
          const month = results.map(item => item.month);
          const count = results.map(item => item.count);
          renderChart(month, count);
        })
        .catch(error =>{
          console.error('Error fetching data:', error);
          alert("fails");
        });
      }

    function renderChart(month, count) {
      const ctx = document.getElementById('analyticsChart').getContext('2d');
      if (chart) chart.destroy();
      chart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: month,
          datasets: [{
            label: 'Users',
            data: count,
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio:false,
          scales: {
            y: { beginAtZero: true }
          }
        }
      });
    }
    
  </script> -->

  <script>
    let chart;

    document.addEventListener('DOMContentLoaded', () => {
      const yearSelect = document.getElementById('yearSelect');
      if (yearSelect.options.length > 0 && yearSelect.value) {
        fetchData();
      }
    });

    function fetchData() {
      const selectedYear = document.getElementById('yearSelect').value;
      console.log(selectedYear);
      
      fetch(`/api/data?year=${selectedYear}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();  // Parse JSON properly
        })
        .then(results => {
          if (!results || results.length === 0) {
            alert('No data available for the selected year');
            if (chart) chart.destroy();
            return;
          }

          const month = results.map(item => item.month);
          const count = results.map(item => item.count);
          renderChart(month, count);
        })
        .catch(error => {
          console.error('Error fetching data:', error);
          alert("Failed to fetch data");
        });
    }

    function renderChart(month, count) {
      const ctx = document.getElementById('analyticsChart').getContext('2d');
      
      if (chart) chart.destroy();
      
      chart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: month,
          datasets: [{
            label: 'Users',
            data: count,
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: { beginAtZero: true }
          }
        }
      });
    }
</script>
</body>
</html>
